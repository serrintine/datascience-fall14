===================== Cassandra: Modified Schema
CREATE KEYSPACE ctr
WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };

USE ctr;

CREATE TABLE clickimpression (
    OwnerId int,
    AdId int,
    numClicks int,
    numImpressions int,
    PRIMARY KEY (OwnerId, AdId)
);

INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (1,1,1,10);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (1,2,0,5);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (1,3,1,20);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (1,4,0,15);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (2,1,0,10);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (2,2,0,55);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (2,3,0,13);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (2,4,0,21);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (3,1,1,32);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (3,2,0,23);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (3,3,2,44);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (3,4,1,36);


===================== Cassandra: CQL Queries and Results
1) SELECT * FROM clickimpression WHERE OwnerId = 1 AND AdId = 3;

    ownerid | adid | numclicks | numimpressions
   ---------+------+-----------+----------------
          1 |    3 |         1 |             20

   (1 rows)


2) SELECT * FROM clickimpression WHERE OwnerId = 2;

    ownerid | adid | numclicks | numimpressions
   ---------+------+-----------+----------------
          2 |    1 |         0 |             10
          2 |    2 |         0 |             55
          2 |    3 |         0 |             13
          2 |    4 |         0 |             21

   (4 rows)


===================== Cassandra: Python Code
#!/usr/bin/env python

from cassandra import ConsistencyLevel
from cassandra.cluster import Cluster
from cassandra.query import SimpleStatement

KEYSPACE = "python_ctr"

def main():
    cluster = Cluster(['127.0.0.1'])
    session = cluster.connect()

    session.execute("""
        CREATE KEYSPACE IF NOT EXISTS %s
        WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': '2' }
        """ % KEYSPACE)

    session.set_keyspace(KEYSPACE)

    session.execute("""
        CREATE TABLE IF NOT EXISTS clickimpression (
            OwnerId int,
            AdId int,
            numClicks int,
            numImpressions int,
            PRIMARY KEY (OwnerId, AdId)
        )
        """)

    query = SimpleStatement("""
        INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions)
        VALUES (%(oi)s, %(ai)s, %(nc)s, %(ni)s)
        """, consistency_level=ConsistencyLevel.ONE)

    prepared = session.prepare("""
        INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions)
        VALUES (?, ?, ?, ?)
        """)
        
    vals = [[1,1,1,10], [1,2,0,5], [1,3,1,20], [1,4,0,15],
            [2,1,0,10], [2,2,0,55], [2,3,0,13], [2,4,0,21],
            [3,1,1,32], [3,2,0,23], [3,3,2,44], [3,4,1,36]]
    for row in vals:
        session.execute(query, dict(oi=row[0], ai=row[1], nc=row[2], ni=row[3]))
        session.execute(prepared, (row[0], row[1], row[2], row[3]))

    future = session.execute_async("SELECT * FROM clickimpression")
    rows = future.result()

    print "Find the ctr for each OwnerId, AdId pair:"
    print "OwnerId\tAdId\tCTR"
    for row in rows:
        print str(row[0]) + "\t" + str(row[1]) + "\t" + str(row[2]/float(row[3]))
        
    print "\nCompute the ctr for each OwnerId:"
    print "OwnerId\tCTR"
    clicks = {}
    impressions = {}
    for row in rows:
        if row[0] in clicks:
            clicks[row[0]] += row[2]
        else:
            clicks[row[0]] = row[2]
        if row[0] in impressions:
            impressions[row[0]] += row[3]
        else:
            impressions[row[0]] = row[3]
    for owner in clicks:
        print str(owner) + "\t" + str(clicks[owner]/float(impressions[owner]))
        
    future = session.execute_async("SELECT * FROM clickimpression WHERE OwnerId = 1 AND AdId = 3")
    rows = future.result()
            
    print "\nCompute the ctr for OwnerId = 1, AdId = 3:"
    print "OwnerId\tAdId\tCTR"
    for row in rows:
        print str(row[0]) + "\t" + str(row[1]) + "\t" + str(row[2]/float(row[3]))
        
    future = session.execute_async("SELECT * FROM clickimpression WHERE OwnerId = 2")
    rows = future.result()
    
    print "\nCompute the ctr for OwnerId = 2:"
    print "OwnerId\tCTR"
    clicks = 0;
    impressions = 0;
    for row in rows:
        clicks += row[2]
        impressions += row[3]
    print str(rows[0][0]) + "\t" + str(clicks/float(impressions))
    
    session.execute("DROP KEYSPACE " + KEYSPACE)

if __name__ == "__main__":
    main()


===================== Cassandra: Output of Running the Python Code
Find the ctr for each OwnerId, AdId pair:
OwnerId    AdId    CTR
1          1       0.1
1          2       0.0
1          3       0.05
1          4       0.0
2          1       0.0
2          2       0.0
2          3       0.0
2          4       0.0
3          1       0.03125
3          2       0.0
3          3       0.0454545454545
3          4       0.0277777777778

Compute the ctr for each OwnerId:
OwnerId    CTR
1          0.04
2          0.0
3          0.0296296296296

Compute the ctr for OwnerId = 1, AdId = 3:
OwnerId    AdId    CTR
1          3       0.05

Compute the ctr for OwnerId = 2:
OwnerId    CTR
2          0.0


===================== MongoDB Queries and Outputs
mongoimport --db test --collection zipcodes --file zipData.json

db.zipcodes.insert({
    "_id" : "99950",
    "city" : "KETCHIKAN",
    "loc" : [ -133.18479, 55.942471 ],
    "pop" : 422,
    "state" : "AK"
})

*********************************************************************

1) db.zipcodes.find(
       { pop: { $lt: 5000000 } },
       { state: 1, city: 1, pop: 1, _id: 0 }
   )

===OUTPUT===
{ "city" : "AGAWAM", "pop" : 15338, "state" : "MA" }
{ "city" : "CUSHMAN", "pop" : 36963, "state" : "MA" }
{ "city" : "BARRE", "pop" : 4546, "state" : "MA" }
{ "city" : "BELCHERTOWN", "pop" : 10579, "state" : "MA" }
{ "city" : "BLANDFORD", "pop" : 1240, "state" : "MA" }
{ "city" : "BRIMFIELD", "pop" : 3706, "state" : "MA" }
{ "city" : "CHESTER", "pop" : 1688, "state" : "MA" }
{ "city" : "CHESTERFIELD", "pop" : 177, "state" : "MA" }
{ "city" : "CHICOPEE", "pop" : 23396, "state" : "MA" }
{ "city" : "CHICOPEE", "pop" : 31495, "state" : "MA" }
{ "city" : "WESTOVER AFB", "pop" : 1764, "state" : "MA" }
{ "city" : "CUMMINGTON", "pop" : 1484, "state" : "MA" }
{ "city" : "MOUNT TOM", "pop" : 16864, "state" : "MA" }
{ "city" : "EAST LONGMEADOW", "pop" : 13367, "state" : "MA" }
{ "city" : "FEEDING HILLS", "pop" : 11985, "state" : "MA" }
{ "city" : "GILBERTVILLE", "pop" : 2385, "state" : "MA" }
{ "city" : "GOSHEN", "pop" : 122, "state" : "MA" }
{ "city" : "GRANBY", "pop" : 5526, "state" : "MA" }
{ "city" : "TOLLAND", "pop" : 1652, "state" : "MA" }
{ "city" : "HADLEY", "pop" : 4231, "state" : "MA" }
Type "it" for more


2) db.zipcodes.aggregate(
       { $group : {
           _id : "$state",
           totalPop : { $sum : "$pop" }
       }},
       { $sort : { totalPop : -1 } }
   )

===OUTPUT===
{
    "result" : [
        {
            "_id" : "CA",
            "totalPop" : 29754890
        },
        {
            "_id" : "NY",
            "totalPop" : 17990402
        },
        {
            "_id" : "TX",
            "totalPop" : 16984601
        },
        {
            "_id" : "FL",
            "totalPop" : 12686644
        },
        {
            "_id" : "PA",
            "totalPop" : 11881643
        },
        {
            "_id" : "IL",
            "totalPop" : 11427576
        },
        {
            "_id" : "OH",
            "totalPop" : 10846517
        },
        {
            "_id" : "MI",
            "totalPop" : 9295297
        },
        {
            "_id" : "NJ",
            "totalPop" : 7730188
        },
        {
            "_id" : "NC",
            "totalPop" : 6628637
        },
        {
            "_id" : "GA",
            "totalPop" : 6478216
        },
        {
            "_id" : "VA",
            "totalPop" : 6181479
        },
        {
            "_id" : "MA",
            "totalPop" : 6016425
        },
        {
            "_id" : "IN",
            "totalPop" : 5544136
        },
        {
            "_id" : "MO",
            "totalPop" : 5110648
        },
        {
            "_id" : "WI",
            "totalPop" : 4891769
        },
        {
            "_id" : "TN",
            "totalPop" : 4876457
        },
        {
            "_id" : "WA",
            "totalPop" : 4866692
        },
        {
            "_id" : "MD",
            "totalPop" : 4781379
        },
        {
            "_id" : "MN",
            "totalPop" : 4372982
        },
        {
            "_id" : "LA",
            "totalPop" : 4217595
        },
        {
            "_id" : "AL",
            "totalPop" : 4040587
        },
        {
            "_id" : "KY",
            "totalPop" : 3675484
        },
        {
            "_id" : "AZ",
            "totalPop" : 3665228
        },
        {
            "_id" : "SC",
            "totalPop" : 3486703
        },
        {
            "_id" : "CO",
            "totalPop" : 3293755
        },
        {
            "_id" : "CT",
            "totalPop" : 3287116
        },
        {
            "_id" : "OK",
            "totalPop" : 3145585
        },
        {
            "_id" : "OR",
            "totalPop" : 2842321
        },
        {
            "_id" : "IA",
            "totalPop" : 2776420
        },
        {
            "_id" : "MS",
            "totalPop" : 2573216
        },
        {
            "_id" : "KS",
            "totalPop" : 2475285
        },
        {
            "_id" : "AR",
            "totalPop" : 2350725
        },
        {
            "_id" : "WV",
            "totalPop" : 1793146
        },
        {
            "_id" : "UT",
            "totalPop" : 1722850
        },
        {
            "_id" : "NE",
            "totalPop" : 1578139
        },
        {
            "_id" : "NM",
            "totalPop" : 1515069
        },
        {
            "_id" : "ME",
            "totalPop" : 1226648
        },
        {
            "_id" : "NV",
            "totalPop" : 1201833
        },
        {
            "_id" : "NH",
            "totalPop" : 1109252
        },
        {
            "_id" : "HI",
            "totalPop" : 1108229
        },
        {
            "_id" : "ID",
            "totalPop" : 1006749
        },
        {
            "_id" : "RI",
            "totalPop" : 1003218
        },
        {
            "_id" : "MT",
            "totalPop" : 798948
        },
        {
            "_id" : "SD",
            "totalPop" : 695397
        },
        {
            "_id" : "DE",
            "totalPop" : 666168
        },
        {
            "_id" : "ND",
            "totalPop" : 638272
        },
        {
            "_id" : "DC",
            "totalPop" : 606900
        },
        {
            "_id" : "VT",
            "totalPop" : 562758
        },
        {
            "_id" : "AK",
            "totalPop" : 544698
        },
        {
            "_id" : "WY",
            "totalPop" : 453528
        }
    ],
    "ok" : 1
}


3) db.zipcodes.aggregate(
       { $group: {
           _id: { state: "$state", city: "$city" },
           pop: { $sum: "$pop" }
       }},
       { $sort: { pop: 1 } },
       { $group: {
           _id : "$_id.state",
           smallestCity: { $first: "$_id.city" }
       }}
   )

===OUTPUT===
{
    "result" : [
        {
            "_id" : "DE",
            "smallestCity" : "BETHEL"
        },
        {
            "_id" : "MO",
            "smallestCity" : "BENDAVIS"
        },
        {
            "_id" : "IL",
            "smallestCity" : "ANCONA"
        },
        {
            "_id" : "OH",
            "smallestCity" : "ISLE SAINT GEORG"
        },
        {
            "_id" : "NH",
            "smallestCity" : "WEST NOTTINGHAM"
        },
        {
            "_id" : "DC",
            "smallestCity" : "PENTAGON"
        },
        {
            "_id" : "ND",
            "smallestCity" : "TROTTERS"
        },
        {
            "_id" : "MD",
            "smallestCity" : "ANNAPOLIS JUNCTI"
        },
        {
            "_id" : "MN",
            "smallestCity" : "JOHNSON"
        },
        {
            "_id" : "UT",
            "smallestCity" : "MODENA"
        },
        {
            "_id" : "WY",
            "smallestCity" : "LOST SPRINGS"
        },
        {
            "_id" : "AZ",
            "smallestCity" : "HUALAPAI"
        },
        {
            "_id" : "CT",
            "smallestCity" : "EAST KILLINGLY"
        },
        {
            "_id" : "WA",
            "smallestCity" : "BENGE"
        },
        {
            "_id" : "AL",
            "smallestCity" : "ALLEN"
        },
        {
            "_id" : "NV",
            "smallestCity" : "TUSCARORA"
        },
        {
            "_id" : "NE",
            "smallestCity" : "LAKESIDE"
        },
        {
            "_id" : "FL",
            "smallestCity" : "CECIL FIELD NAS"
        },
        {
            "_id" : "SD",
            "smallestCity" : "ZEONA"
        },
        {
            "_id" : "TX",
            "smallestCity" : "FULTON"
        },
        {
            "_id" : "WI",
            "smallestCity" : "CLAM LAKE"
        },
        {
            "_id" : "MS",
            "smallestCity" : "CHUNKY"
        },
        {
            "_id" : "IA",
            "smallestCity" : "DOUDS"
        },
        {
            "_id" : "HI",
            "smallestCity" : "NINOLE"
        },
        {
            "_id" : "NC",
            "smallestCity" : "GLOUCESTER"
        },
        {
            "_id" : "MT",
            "smallestCity" : "MOSBY"
        },
        {
            "_id" : "OK",
            "smallestCity" : "SOUTHARD"
        },
        {
            "_id" : "ID",
            "smallestCity" : "KEUTERVILLE"
        },
        {
            "_id" : "IN",
            "smallestCity" : "WESTPOINT"
        },
        {
            "_id" : "KY",
            "smallestCity" : "BROWDER"
        },
        {
            "_id" : "VT",
            "smallestCity" : "UNIV OF VERMONT"
        },
        {
            "_id" : "PA",
            "smallestCity" : "HAMILTON"
        },
        {
            "_id" : "LA",
            "smallestCity" : "FORDOCHE"
        },
        {
            "_id" : "SC",
            "smallestCity" : "QUINBY"
        },
        {
            "_id" : "KS",
            "smallestCity" : "ARNOLD"
        },
        {
            "_id" : "NJ",
            "smallestCity" : "IMLAYSTOWN"
        },
        {
            "_id" : "WV",
            "smallestCity" : "MOUNT CARBON"
        },
        {
            "_id" : "TN",
            "smallestCity" : "ALLRED"
        },
        {
            "_id" : "VA",
            "smallestCity" : "WALLOPS ISLAND"
        },
        {
            "_id" : "AK",
            "smallestCity" : "CHEVAK"
        },
        {
            "_id" : "NY",
            "smallestCity" : "RAQUETTE LAKE"
        },
        {
            "_id" : "CO",
            "smallestCity" : "CHEYENNE MTN AFB"
        },
        {
            "_id" : "MI",
            "smallestCity" : "LELAND"
        },
        {
            "_id" : "OR",
            "smallestCity" : "KENT"
        },
        {
            "_id" : "GA",
            "smallestCity" : "FORT STEWART"
        },
        {
            "_id" : "RI",
            "smallestCity" : "CLAYVILLE"
        },
        {
            "_id" : "NM",
            "smallestCity" : "ALGODONES"
        },
        {
            "_id" : "CA",
            "smallestCity" : "TWIN BRIDGES"
        },
        {
            "_id" : "AR",
            "smallestCity" : "TOMATO"
        },
        {
            "_id" : "MA",
            "smallestCity" : "BUCKLAND"
        },
        {
            "_id" : "ME",
            "smallestCity" : "BUSTINS ISLAND"
        }
    ],
    "ok" : 1
}

*********************************************************************

m = function() {
    emit(this.state, { pop: this.pop, count: 1 });
};

r = function(key, values) {
    for (var i=1; i<values.length; i++) {
        values[0].pop += values[i].pop;
        values[0].count += values[i].count;
    }
    return values[0];
};

f = function(key, value) {
    value.avg = value.pop / value.count;
    return value;
};
                  
db.zipcodes.mapReduce(
    m, r, { out: "Avg city pop by state", finalize: f }
).find()

===OUTPUT===
{ "_id" : "AK", "value" : { "pop" : 544698, "count" : 195, "avg" : 2793.3230769230768 } }
{ "_id" : "AL", "value" : { "pop" : 4040587, "count" : 567, "avg" : 7126.255731922399 } }
{ "_id" : "AR", "value" : { "pop" : 2350725, "count" : 578, "avg" : 4066.998269896194 } }
{ "_id" : "AZ", "value" : { "pop" : 3665228, "count" : 270, "avg" : 13574.918518518518 } }
{ "_id" : "CA", "value" : { "pop" : 29754890, "count" : 1516, "avg" : 19627.236147757256 } }
{ "_id" : "CO", "value" : { "pop" : 3293755, "count" : 414, "avg" : 7955.929951690821 } }
{ "_id" : "CT", "value" : { "pop" : 3287116, "count" : 263, "avg" : 12498.539923954373 } }
{ "_id" : "DC", "value" : { "pop" : 606900, "count" : 24, "avg" : 25287.5 } }
{ "_id" : "DE", "value" : { "pop" : 666168, "count" : 53, "avg" : 12569.207547169812 } }
{ "_id" : "FL", "value" : { "pop" : 12686644, "count" : 804, "avg" : 15779.407960199005 } }
{ "_id" : "GA", "value" : { "pop" : 6478216, "count" : 635, "avg" : 10201.914960629922 } }
{ "_id" : "HI", "value" : { "pop" : 1108229, "count" : 80, "avg" : 13852.8625 } }
{ "_id" : "IA", "value" : { "pop" : 2776420, "count" : 922, "avg" : 3011.301518438178 } }
{ "_id" : "ID", "value" : { "pop" : 1006749, "count" : 244, "avg" : 4126.020491803279 } }
{ "_id" : "IL", "value" : { "pop" : 11427576, "count" : 1237, "avg" : 9238.137429264349 } }
{ "_id" : "IN", "value" : { "pop" : 5544136, "count" : 676, "avg" : 8201.384615384615 } }
{ "_id" : "KS", "value" : { "pop" : 2475285, "count" : 715, "avg" : 3461.937062937063 } }
{ "_id" : "KY", "value" : { "pop" : 3675484, "count" : 809, "avg" : 4543.243510506799 } }
{ "_id" : "LA", "value" : { "pop" : 4217595, "count" : 464, "avg" : 9089.644396551725 } }
{ "_id" : "MA", "value" : { "pop" : 6016425, "count" : 474, "avg" : 12692.879746835442 } }
Type "it" for more
