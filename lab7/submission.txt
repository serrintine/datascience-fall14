===================== Cassandra: Modified Schema
CREATE KEYSPACE ctr
WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };

USE ctr;

CREATE TABLE clickimpression (
    OwnerId int,
    AdId int,
    numClicks int,
    numImpressions int,
    PRIMARY KEY (OwnerId, AdId)
);

INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (1,1,1,10);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (1,2,0,5);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (1,3,1,20);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (1,4,0,15);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (2,1,0,10);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (2,2,0,55);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (2,3,0,13);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (2,4,0,21);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (3,1,1,32);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (3,2,0,23);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (3,3,2,44);
INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions) VALUES (3,4,1,36);


===================== Cassandra: CQL Queries and Results
1) SELECT * FROM clickimpression WHERE OwnerId = 1 AND AdId = 3;

    ownerid | adid | numclicks | numimpressions
   ---------+------+-----------+----------------
          1 |    3 |         1 |             20

   (1 rows)


2) SELECT * FROM clickimpression WHERE OwnerId = 2;

    ownerid | adid | numclicks | numimpressions
   ---------+------+-----------+----------------
          2 |    1 |         0 |             10
          2 |    2 |         0 |             55
          2 |    3 |         0 |             13
          2 |    4 |         0 |             21

   (4 rows)


===================== Cassandra: Python Code
#!/usr/bin/env python

from cassandra import ConsistencyLevel
from cassandra.cluster import Cluster
from cassandra.query import SimpleStatement

KEYSPACE = "python_ctr"

def main():
    cluster = Cluster(['127.0.0.1'])
    session = cluster.connect()

    session.execute("""
        CREATE KEYSPACE IF NOT EXISTS %s
        WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': '2' }
        """ % KEYSPACE)

    session.set_keyspace(KEYSPACE)

    session.execute("""
        CREATE TABLE IF NOT EXISTS clickimpression (
            OwnerId int,
            AdId int,
            numClicks int,
            numImpressions int,
            PRIMARY KEY (OwnerId, AdId)
        )
        """)

    query = SimpleStatement("""
        INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions)
        VALUES (%(oi)s, %(ai)s, %(nc)s, %(ni)s)
        """, consistency_level=ConsistencyLevel.ONE)

    prepared = session.prepare("""
        INSERT INTO clickimpression (OwnerId, AdId, numClicks, numImpressions)
        VALUES (?, ?, ?, ?)
        """)
        
    vals = [[1,1,1,10], [1,2,0,5], [1,3,1,20], [1,4,0,15],
            [2,1,0,10], [2,2,0,55], [2,3,0,13], [2,4,0,21],
            [3,1,1,32], [3,2,0,23], [3,3,2,44], [3,4,1,36]]
    for row in vals:
        session.execute(query, dict(oi=row[0], ai=row[1], nc=row[2], ni=row[3]))
        session.execute(prepared, (row[0], row[1], row[2], row[3]))

    future = session.execute_async("SELECT * FROM clickimpression")
    rows = future.result()

    print "Find the ctr for each OwnerId, AdId pair:"
    print "OwnerId\tAdId\tCTR"
    for row in rows:
        print str(row[0]) + "\t" + str(row[1]) + "\t" + str(row[2]/float(row[3]))
        
    print "\nCompute the ctr for each OwnerId:"
    print "OwnerId\tCTR"
    clicks = {}
    impressions = {}
    for row in rows:
        if row[0] in clicks:
            clicks[row[0]] += row[2]
        else:
            clicks[row[0]] = row[2]
        if row[0] in impressions:
            impressions[row[0]] += row[3]
        else:
            impressions[row[0]] = row[3]
    for owner in clicks:
        print str(owner) + "\t" + str(clicks[owner]/float(impressions[owner]))
        
    future = session.execute_async("SELECT * FROM clickimpression WHERE OwnerId = 1 AND AdId = 3")
    rows = future.result()
            
    print "\nCompute the ctr for OwnerId = 1, AdId = 3:"
    print "OwnerId\tAdId\tCTR"
    for row in rows:
        print str(row[0]) + "\t" + str(row[1]) + "\t" + str(row[2]/float(row[3]))
        
    future = session.execute_async("SELECT * FROM clickimpression WHERE OwnerId = 2")
    rows = future.result()
    
    print "\nCompute the ctr for OwnerId = 2:"
    print "OwnerId\tCTR"
    clicks = 0;
    impressions = 0;
    for row in rows:
        clicks += row[2]
        impressions += row[3]
    print str(rows[0][0]) + "\t" + str(clicks/float(impressions))
    
    session.execute("DROP KEYSPACE " + KEYSPACE)

if __name__ == "__main__":
    main()


===================== Cassandra: Output of Running the Python Code
Find the ctr for each OwnerId, AdId pair:
OwnerId    AdId    CTR
1          1       0.1
1          2       0.0
1          3       0.05
1          4       0.0
2          1       0.0
2          2       0.0
2          3       0.0
2          4       0.0
3          1       0.03125
3          2       0.0
3          3       0.0454545454545
3          4       0.0277777777778

Compute the ctr for each OwnerId:
OwnerId    CTR
1          0.04
2          0.0
3          0.0296296296296

Compute the ctr for OwnerId = 1, AdId = 3:
OwnerId    AdId    CTR
1          3       0.05

Compute the ctr for OwnerId = 2:
OwnerId    CTR
2          0.0


===================== MongoDB Queries and Outputs
mongoimport --db test --collection zipcodes --file zipData.json

db.zipcodes.insert({
    "_id" : "99950",
    "city" : "KETCHIKAN",
    "loc" : [ -133.18479, 55.942471 ],
    "pop" : 422,
    "state" : "AK"
})

*********************************************************************

1) db.zipcodes.aggregate(
       { $group: {
           _id: { state: "$state", city: "$city" },
           pop: { $sum: "$pop" }
       }},
       { $match: { pop: { $lt: 5000000 } } },
       { $sort: { _id: 1 } },
       { $limit: 10 }
   )

===OUTPUT===
{
	"result" : [
		{
			"_id" : {
				"state" : "AK",
				"city" : "AKHIOK"
			},
			"pop" : 13309
		},
		{
			"_id" : {
				"state" : "AK",
				"city" : "AKIACHAK"
			},
			"pop" : 481
		},
		{
			"_id" : {
				"state" : "AK",
				"city" : "AKIAK"
			},
			"pop" : 285
		},
		{
			"_id" : {
				"state" : "AK",
				"city" : "AKUTAN"
			},
			"pop" : 589
		},
		{
			"_id" : {
				"state" : "AK",
				"city" : "ALAKANUK"
			},
			"pop" : 1186
		},
		{
			"_id" : {
				"state" : "AK",
				"city" : "ALEKNAGIK"
			},
			"pop" : 185
		},
		{
			"_id" : {
				"state" : "AK",
				"city" : "ALLAKAKET"
			},
			"pop" : 170
		},
		{
			"_id" : {
				"state" : "AK",
				"city" : "AMBLER"
			},
			"pop" : 8
		},
		{
			"_id" : {
				"state" : "AK",
				"city" : "ANAKTUVUK PASS"
			},
			"pop" : 260
		},
		{
			"_id" : {
				"state" : "AK",
				"city" : "ANCHORAGE"
			},
			"pop" : 183987
		}
	],
	"ok" : 1
}


2) db.zipcodes.aggregate(
       { $group: {
           _id: "$state",
           totalPop: { $sum: "$pop" }
       }},
       { $sort: { totalPop: -1 } },
       { $limit: 10 }
   )

===OUTPUT===
{
	"result" : [
		{
			"_id" : "CA",
			"totalPop" : 29754890
		},
		{
			"_id" : "NY",
			"totalPop" : 17990402
		},
		{
			"_id" : "TX",
			"totalPop" : 16984601
		},
		{
			"_id" : "FL",
			"totalPop" : 12686644
		},
		{
			"_id" : "PA",
			"totalPop" : 11881643
		},
		{
			"_id" : "IL",
			"totalPop" : 11427576
		},
		{
			"_id" : "OH",
			"totalPop" : 10846517
		},
		{
			"_id" : "MI",
			"totalPop" : 9295297
		},
		{
			"_id" : "NJ",
			"totalPop" : 7730188
		},
		{
			"_id" : "NC",
			"totalPop" : 6628637
		}
	],
	"ok" : 1
}


3) db.zipcodes.aggregate(
       { $group: {
           _id: { state: "$state", city: "$city" },
           pop: { $sum: "$pop" }
       }},
       { $sort: { pop: 1 } },
       { $group: {
           _id: "$_id.state",
           smallestCity: { $first: "$_id.city" }
       }},
       { $limit: 10 }
   )

===OUTPUT===
{
	"result" : [
		{
			"_id" : "DE",
			"smallestCity" : "BETHEL"
		},
		{
			"_id" : "MO",
			"smallestCity" : "BENDAVIS"
		},
		{
			"_id" : "IL",
			"smallestCity" : "ANCONA"
		},
		{
			"_id" : "OH",
			"smallestCity" : "ISLE SAINT GEORG"
		},
		{
			"_id" : "NH",
			"smallestCity" : "WEST NOTTINGHAM"
		},
		{
			"_id" : "DC",
			"smallestCity" : "PENTAGON"
		},
		{
			"_id" : "ND",
			"smallestCity" : "TROTTERS"
		},
		{
			"_id" : "MD",
			"smallestCity" : "ANNAPOLIS JUNCTI"
		},
		{
			"_id" : "MN",
			"smallestCity" : "JOHNSON"
		},
		{
			"_id" : "UT",
			"smallestCity" : "MODENA"
		}
	],
	"ok" : 1
}

*********************************************************************

//Use aggregate operation for checking accuracy of mapreduce.
//It seems that mapreduce sometimes counts more cities than
//aggregate does, e.g. mapreduce counts 332 cities in CO but
//aggregate counts only 330. I am not sure why this happens.
db.zipcodes.aggregate(
   { $group : { _id : { state : "$state", city : "$city" }, pop : { $sum : "$pop" } } },
   { $group : { _id : "$_id.state", avgCityPop : { $avg : "$pop" } } },
   { $sort: { _id: 1 } }
)


//Begin mapreduce operation

m = function() {
    emit(this.state, { pop: this.pop, city: this.city, count: 1 });
};

r = function(key, values) {
    n = { cities: [ values[0].city ] }
    for (var i=1; i<values.length; i++) {
        city = values[i].city;
        if (n.cities.indexOf(city) == -1) {
            n.cities.push(city);
            values[0].count += values[i].count;
        }
        values[0].pop += values[i].pop;
    }
    return { pop: values[0].pop, count: values[0].count};
};

f = function(key, value) {
    value.avg = value.pop / value.count;
    return value;
};
                  
db.zipcodes.mapReduce(
    m, r, { out: "Avg city pop by state", finalize: f }
).find()

===OUTPUT===
{ "_id" : "AK", "value" : { "pop" : 544698, "count" : 183, "avg" : 2976.4918032786886 } }
{ "_id" : "AL", "value" : { "pop" : 4040587, "count" : 511, "avg" : 7907.2152641878665 } }
{ "_id" : "AR", "value" : { "pop" : 2350725, "count" : 563, "avg" : 4175.355239786856 } }
{ "_id" : "AZ", "value" : { "pop" : 3665228, "count" : 180, "avg" : 20362.37777777778 } }
{ "_id" : "CA", "value" : { "pop" : 29754890, "count" : 1080, "avg" : 27550.824074074073 } }
{ "_id" : "CO", "value" : { "pop" : 3293755, "count" : 332, "avg" : 9920.948795180722 } }
{ "_id" : "CT", "value" : { "pop" : 3287116, "count" : 226, "avg" : 14544.761061946903 } }
{ "_id" : "DC", "value" : { "pop" : 606900, "count" : 2, "avg" : 303450 } }
{ "_id" : "DE", "value" : { "pop" : 666168, "count" : 46, "avg" : 14481.91304347826 } }
{ "_id" : "FL", "value" : { "pop" : 12686644, "count" : 470, "avg" : 26992.859574468086 } }
{ "_id" : "GA", "value" : { "pop" : 6478216, "count" : 563, "avg" : 11506.600355239787 } }
{ "_id" : "HI", "value" : { "pop" : 1108229, "count" : 70, "avg" : 15831.842857142858 } }
{ "_id" : "IA", "value" : { "pop" : 2776420, "count" : 891, "avg" : 3116.0718294051626 } }
{ "_id" : "ID", "value" : { "pop" : 1006749, "count" : 233, "avg" : 4320.811158798283 } }
{ "_id" : "IL", "value" : { "pop" : 11427576, "count" : 1149, "avg" : 9945.671018276762 } }
{ "_id" : "IN", "value" : { "pop" : 5544136, "count" : 598, "avg" : 9271.130434782608 } }
{ "_id" : "KS", "value" : { "pop" : 2475285, "count" : 648, "avg" : 3819.884259259259 } }
{ "_id" : "KY", "value" : { "pop" : 3675484, "count" : 772, "avg" : 4760.989637305699 } }
{ "_id" : "LA", "value" : { "pop" : 4217595, "count" : 406, "avg" : 10388.165024630542 } }
{ "_id" : "MA", "value" : { "pop" : 6016425, "count" : 408, "avg" : 14746.139705882353 } }
Type "it" for more
